C51 COMPILER V9.54   MAIN                                                                  10/10/2018 00:49:29 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: E:\KeilC51\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <STC15W4K60S4.h>       //STC15W4K48S4 专用头文件
   2          #include <intrins.h>            //STC特殊命令符号声明
   3          #include <MPU-6050.H>           //MPU6050数字陀螺仪
   4          #include <STC15W4K-PWM.H>       //单片机所有IO口初始化-PWM口初始化
   5          #include <LT8910.h>                     //无线2.4G模块
   6          //#include <STC15W4K-ADC.h>     //STC15W4K-ADC  硬件ADC模数转换
   7          #include <IMU.H>                        //IMU飞行核心算法
   8          #include <KalmanFilter.h>  //卡尔曼滤波算法
   9          #include "globeVar.h"
  10          #include "alldef.h"
  11          #include "FlightControl.h"
  12          
  13          
  14          
  15          /**
  16           * 定时器0 初始化函数
  17           * 12毫秒@24.000MHz
  18           *
  19           * @author KingBoy (2018/5/19)
  20           *
  21           * @param void
  22           */
  23          void Timer0Init(void);
  24          /**
  25           * 时间延时 函数
  26           *
  27           * @author KingBoy (2018/5/20)
  28           *
  29           * @param x
  30           */
  31          void Delay(unsigned int x);
  32          
  33          /**
  34           * 单片机采用STC15W4K48S4-增强型单片机（IPA需修改EEPROM代码）
  35           * 工作电压为：5V 晶振频率为：24M 无线通讯模块为：LT8910
  36           * 本程序中采用了MCU6050做姿态数据采集加PID算法给硬件4路PWM控制MOS管驱动空心杯电机
  37           * 注意：此程序只兼容：空心杯716电机与45MM专用正反桨（自己的电机或需修改PID参数）
  38           * 在后期的程序更新中，会增加硬件代码达到预期飞行功能。敬请关注。
  39           *
  40           * @author KingBoy (2018/5/19)
  41           *
  42           * @param void
  43           */
  44          void main(void)
  45          {
  46   1              PWM_Init(); //初始化PWM
  47   1              Set_PWM(1000, 1000, 1000, 1000); //关闭电机
  48   1              LedR = 0;LedG = 1;LedB = 1; //3颗状态灯
  49   1              Delay(500); //延时一会
  50   1              LedR = 1;LedG = 0;LedB = 1; //3颗状态灯
  51   1              Delay(500); //延时一会
  52   1              LedR = 1;LedG = 1;LedB = 0; //3颗状态灯
  53   1              Delay(500); //延时一会
  54   1              LedR = 1;LedG = 1;LedB = 1; //3颗状态灯
  55   1              Delay(10);    // 延时 100
C51 COMPILER V9.54   MAIN                                                                  10/10/2018 00:49:29 PAGE 2   

  56   1      
  57   1              //InitADC();/ADC模数转换 初始化（后期开发）
  58   1              Delay(10); //延时 100
  59   1              Init_MPU6050(); //初始化MPU-6050
  60   1              Delay(10); //延时 100
  61   1              LT8910_Init(); //无线2.4G模块初始化
  62   1              Delay(100); //延时一会 1S
  63   1      
  64   1              Timer0Init(); //初始化定时器
  65   1              Delay(100);   //延时一会 1S
  66   1              /*默认值初始化*/
  67   1      
  68   1              rc_throttle = 0;   //初始化油门变量
  69   1              rc_Yaw = 128;      //初始化航向变量
  70   1              rc_Roll = 128;     //初始化横滚变量
  71   1              rc_Pitch = 128;    //初始化俯仰变量
  72   1              LedB = 0;       //开启绿灯
  73   1              rcAngle_X_offset = 0;        //横滚手动值
  74   1              rcAngle_Y_offset = 0;        //俯仰手动值
  75   1              rcAngle_Z_offset = 0;        //航向手动值
  76   1      
  77   1              //Flight();//编译后2个警告是说 飞控函数中断量 不在主函数里【不需要纠结】
  78   1              EA = 1;  //开总中断
  79   1              while (1)
  80   1              {
  81   2      #if 0
                              //要放到定时器中断里运行
                              RX_model();             //接收模式
                              js_shuju(RxBuf, 15);     //读取数据包
              #endif
  86   2                      /*控制指令接收正确*/
  87   2                      if (MAC_calc(RxBuf, 10, RxBuf[10]) == 0)
  88   2                      {
  89   3                              LostCom = RxBuf[0];                                                     //接收 失联变量
  90   3                              LockState = RxBuf[1];                                           //接收 命令值 1=上锁  5=解锁
  91   3                              rc_throttle = RxBuf[2] * 0xff + RxBuf[3];       //接收 油门变量
  92   3                              rc_Yaw = RxBuf[4];                                                      //接收 航向摇杆参数
  93   3                              rc_Roll = RxBuf[5];                                                     //接收 横滚摇杆参数
  94   3                              rc_Pitch = RxBuf[6];                                            //接收 俯仰摇杆参数
  95   3                              rcAngle_X_offset = RxBuf[7] - 128;                      //读出 横滚微调变量
  96   3                              rcAngle_Y_offset = RxBuf[8] - 128;                      //读出 俯仰微调变量
  97   3                              rcAngle_Z_offset = RxBuf[9] - 128;                      //读出 航向微调变量
  98   3                              LedG = 1;                                                                       //LED 绿灯灭
  99   3                      }
 100   2                      else
 101   2                      {
 102   3                              LedG = 0;                               //LED 绿灯亮
 103   3                      }
 104   2                      if (LockState == 1)                         //遥控命令 上锁
 105   2                      {
 106   3                              LedB = 1;                               //航向灯 蓝色灭
 107   3                      }
 108   2                      if (LockState == 5)                         //遥控命令 解锁
 109   2                      {
 110   3                              LedB = 0;                               //航向灯 蓝色亮
 111   3                      }
 112   2                      Delay(3);     //延时一会
 113   2      #if 0
                              //ADC电压低压检测自停保护功能 后期开发
                              ADC_CONTR
              #endif
 117   2              }
C51 COMPILER V9.54   MAIN                                                                  10/10/2018 00:49:29 PAGE 3   

 118   1      }
 119          
 120          /**
 121           * 定时器0 初始化函数
 122           * 12毫秒@24.000MHz
 123           *
 124           * @author KingBoy (2018/5/19)
 125           *
 126           * @param void
 127           */
 128          void Timer0Init(void)
 129          {
 130   1              AUXR &= 0x7F;   //定时器时钟12T模式
 131   1              TMOD &= 0xF0;   //设置定时器模式
 132   1              TL0 = 0x40;     //设置定时初值
 133   1              TH0 = 0xA2;     //设置定时初值
 134   1              TF0 = 0;        //清除TF0标志
 135   1              TR0 = 1;        //定时器0开始计时
 136   1              ET0 = 1;        //Timer0 Interrupt Enable
 137   1      }
 138          /**
 139           * 时间延时 函数
 140           *
 141           * @author KingBoy (2018/5/20)
 142           *
 143           * @param x
 144           */
 145          void Delay(unsigned int x)
 146          {
 147   1              unsigned int i, j;
 148   1              for (i = 0; i < x; i++)
 149   1              {
 150   2                      for (j = 0; j < 250; j++)
 151   2                      {
 152   3                              ;
 153   3                      }
 154   2              }
 155   1      }
 156          
 157          /**
 158           * PID算法飞控自平衡函数，定时器0中断12毫秒执行一次
 159           *
 160           * @author KingBoy (2018/5/20)
 161           *
 162           * @param void
 163           */
 164          void Flight(void) interrupt 1
 165          {
 166   1              /*LT8910设置为接收模式*/
 167   1              RX_model();
 168   1              /*接收15字节数据*/
 169   1              ReceiveData(RxBuf, 15);
 170   1      
 171   1      
 172   1              Read_MPU6050(IMUdata); //直接读取MPU6050陀螺仪和加速度的数据包
 173   1      
 174   1              Angle_ax = RCLowPassFilter_ax(((int *)&IMUdata)[0], RC_KALMAN_Q, RC_KALMAN_R);  //低通滤波，见文档解释
 175   1              Angle_ay = RCLowPassFilter_ay(((int *)&IMUdata)[1], RC_KALMAN_Q, RC_KALMAN_R);
 176   1              Angle_az = RCLowPassFilter_az(((int *)&IMUdata)[2], RC_KALMAN_Q, RC_KALMAN_R);
 177   1      
 178   1              Omega_gx = ((float)(((int *)&IMUdata)[4])) / 65.5;   //陀螺仪处理       结果单位是 +-度
 179   1              Omega_gy = ((float)(((int *)&IMUdata)[5])) / 65.5;   //陀螺仪量程 +-500度/S, 1度/秒 对应读数 65.536
C51 COMPILER V9.54   MAIN                                                                  10/10/2018 00:49:29 PAGE 4   

 180   1              Omega_gz = RCLowPassFilter_gyroz(((int *)&IMUdata)[6], Q15(0.2), Q15(0.8));
 181   1              IMU_gz = Omega_gz / 65.5;
 182   1              Last_Angle_gx = Omega_gx;       //储存上一次角速度数据
 183   1              Last_Omega_gy = Omega_gy;
 184   1      
 185   1              //*********************************** 四元数解算 ***********************************
 186   1              IMUupdate(Omega_gx * 0.0174533f,Omega_gy * 0.0174533f,IMU_gz * 0.0174533f,Angle_ax,Angle_ay,Angle_az);
 187   1              //姿态解算，精度0.1度
 188   1              //发送到遥控器
 189   1              //      TxBuf[0]=(AngleX+900)/0xff; // 数值是 48~1752 = 0-360度
 190   1              //      TxBuf[1]=(AngleX+900)%0xff;     // 数值是 48~1752 = 0-360度
 191   1              //      TxBuf[2]=(AngleY+900)/0xff;     // 数值是 48~1752 = 0-360度
 192   1              //      TxBuf[3]=(AngleY+900)%0xff;     // 数值是 48~1752 = 0-360度
 193   1              //****飞控失联判断 自动降落算法*********************
 194   1              //接收遥控器发来的不断更新数据 判断联机通讯是否正常
 195   1              LostControlProtect();
 196   1              /*姿态角失控保护*/
 197   1              DangerMotionProtect();
 198   1      
 199   1              //****以下是飞行控制算法************************************
 200   1              PIDcontrolX();
 201   1              PIDcontrolY();
 202   1              PIDcontrolZ();
 203   1              //**************将速度参数加载至PWM模块*************************************************
 204   1              //速度参数控制，防止超过PWM参数范围0-1000（X型有效）
 205   1              PWMoutput();
 206   1      
 207   1              //满足条件：（解锁：2.4G=5；油门大于30）才能控制电机
 208   1              if (LockState == 5 && d_throttle >= 50)
 209   1              {
 210   2                      Set_PWM(1000 - PWM1, 1000 - PWM2, 1000 - PWM3, 1000 - PWM0);
 211   2              } //启动PWM
 212   1              else
 213   1              {
 214   2                      Set_PWM(1000, 1000, 1000, 1000);
 215   2              } //关闭PWM
 216   1      }
 217          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    927    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
